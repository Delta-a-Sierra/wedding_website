// Code generated by mockery v2.42.1. DO NOT EDIT.

package domain

import (
	context "context"

	entities "github.com/Delta-a-Sierra/wedding_website/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockWeddingInfoRepo is an autogenerated mock type for the WeddingInfoRepo type
type MockWeddingInfoRepo struct {
	mock.Mock
}

type MockWeddingInfoRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeddingInfoRepo) EXPECT() *MockWeddingInfoRepo_Expecter {
	return &MockWeddingInfoRepo_Expecter{mock: &_m.Mock}
}

// AddGuest provides a mock function with given fields: _a0, _a1
func (_m *MockWeddingInfoRepo) AddGuest(_a0 context.Context, _a1 entities.Guest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddGuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Guest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWeddingInfoRepo_AddGuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGuest'
type MockWeddingInfoRepo_AddGuest_Call struct {
	*mock.Call
}

// AddGuest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entities.Guest
func (_e *MockWeddingInfoRepo_Expecter) AddGuest(_a0 interface{}, _a1 interface{}) *MockWeddingInfoRepo_AddGuest_Call {
	return &MockWeddingInfoRepo_AddGuest_Call{Call: _e.mock.On("AddGuest", _a0, _a1)}
}

func (_c *MockWeddingInfoRepo_AddGuest_Call) Run(run func(_a0 context.Context, _a1 entities.Guest)) *MockWeddingInfoRepo_AddGuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Guest))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_AddGuest_Call) Return(_a0 error) *MockWeddingInfoRepo_AddGuest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWeddingInfoRepo_AddGuest_Call) RunAndReturn(run func(context.Context, entities.Guest) error) *MockWeddingInfoRepo_AddGuest_Call {
	_c.Call.Return(run)
	return _c
}

// GetGuestByEmail provides a mock function with given fields: _a0, _a1
func (_m *MockWeddingInfoRepo) GetGuestByEmail(_a0 context.Context, _a1 string) (entities.Guest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetGuestByEmail")
	}

	var r0 entities.Guest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.Guest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Guest); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entities.Guest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeddingInfoRepo_GetGuestByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGuestByEmail'
type MockWeddingInfoRepo_GetGuestByEmail_Call struct {
	*mock.Call
}

// GetGuestByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockWeddingInfoRepo_Expecter) GetGuestByEmail(_a0 interface{}, _a1 interface{}) *MockWeddingInfoRepo_GetGuestByEmail_Call {
	return &MockWeddingInfoRepo_GetGuestByEmail_Call{Call: _e.mock.On("GetGuestByEmail", _a0, _a1)}
}

func (_c *MockWeddingInfoRepo_GetGuestByEmail_Call) Run(run func(_a0 context.Context, _a1 string)) *MockWeddingInfoRepo_GetGuestByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_GetGuestByEmail_Call) Return(_a0 entities.Guest, _a1 error) *MockWeddingInfoRepo_GetGuestByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeddingInfoRepo_GetGuestByEmail_Call) RunAndReturn(run func(context.Context, string) (entities.Guest, error)) *MockWeddingInfoRepo_GetGuestByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetGuestByID provides a mock function with given fields: _a0, _a1
func (_m *MockWeddingInfoRepo) GetGuestByID(_a0 context.Context, _a1 uuid.UUID) (entities.Guest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetGuestByID")
	}

	var r0 entities.Guest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entities.Guest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entities.Guest); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entities.Guest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeddingInfoRepo_GetGuestByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGuestByID'
type MockWeddingInfoRepo_GetGuestByID_Call struct {
	*mock.Call
}

// GetGuestByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *MockWeddingInfoRepo_Expecter) GetGuestByID(_a0 interface{}, _a1 interface{}) *MockWeddingInfoRepo_GetGuestByID_Call {
	return &MockWeddingInfoRepo_GetGuestByID_Call{Call: _e.mock.On("GetGuestByID", _a0, _a1)}
}

func (_c *MockWeddingInfoRepo_GetGuestByID_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *MockWeddingInfoRepo_GetGuestByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_GetGuestByID_Call) Return(_a0 entities.Guest, _a1 error) *MockWeddingInfoRepo_GetGuestByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeddingInfoRepo_GetGuestByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entities.Guest, error)) *MockWeddingInfoRepo_GetGuestByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGuestList provides a mock function with given fields: _a0
func (_m *MockWeddingInfoRepo) GetGuestList(_a0 context.Context) ([]entities.Guest, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetGuestList")
	}

	var r0 []entities.Guest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Guest, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Guest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Guest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeddingInfoRepo_GetGuestList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGuestList'
type MockWeddingInfoRepo_GetGuestList_Call struct {
	*mock.Call
}

// GetGuestList is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockWeddingInfoRepo_Expecter) GetGuestList(_a0 interface{}) *MockWeddingInfoRepo_GetGuestList_Call {
	return &MockWeddingInfoRepo_GetGuestList_Call{Call: _e.mock.On("GetGuestList", _a0)}
}

func (_c *MockWeddingInfoRepo_GetGuestList_Call) Run(run func(_a0 context.Context)) *MockWeddingInfoRepo_GetGuestList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_GetGuestList_Call) Return(_a0 []entities.Guest, _a1 error) *MockWeddingInfoRepo_GetGuestList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeddingInfoRepo_GetGuestList_Call) RunAndReturn(run func(context.Context) ([]entities.Guest, error)) *MockWeddingInfoRepo_GetGuestList_Call {
	_c.Call.Return(run)
	return _c
}

// GetWeddingDate provides a mock function with given fields: _a0
func (_m *MockWeddingInfoRepo) GetWeddingDate(_a0 context.Context) (time.Time, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWeddingDate")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Time, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeddingInfoRepo_GetWeddingDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeddingDate'
type MockWeddingInfoRepo_GetWeddingDate_Call struct {
	*mock.Call
}

// GetWeddingDate is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockWeddingInfoRepo_Expecter) GetWeddingDate(_a0 interface{}) *MockWeddingInfoRepo_GetWeddingDate_Call {
	return &MockWeddingInfoRepo_GetWeddingDate_Call{Call: _e.mock.On("GetWeddingDate", _a0)}
}

func (_c *MockWeddingInfoRepo_GetWeddingDate_Call) Run(run func(_a0 context.Context)) *MockWeddingInfoRepo_GetWeddingDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_GetWeddingDate_Call) Return(_a0 time.Time, _a1 error) *MockWeddingInfoRepo_GetWeddingDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeddingInfoRepo_GetWeddingDate_Call) RunAndReturn(run func(context.Context) (time.Time, error)) *MockWeddingInfoRepo_GetWeddingDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetWeddingInfo provides a mock function with given fields: _a0
func (_m *MockWeddingInfoRepo) GetWeddingInfo(_a0 context.Context) (entities.WeddingInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWeddingInfo")
	}

	var r0 entities.WeddingInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entities.WeddingInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entities.WeddingInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.WeddingInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeddingInfoRepo_GetWeddingInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeddingInfo'
type MockWeddingInfoRepo_GetWeddingInfo_Call struct {
	*mock.Call
}

// GetWeddingInfo is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockWeddingInfoRepo_Expecter) GetWeddingInfo(_a0 interface{}) *MockWeddingInfoRepo_GetWeddingInfo_Call {
	return &MockWeddingInfoRepo_GetWeddingInfo_Call{Call: _e.mock.On("GetWeddingInfo", _a0)}
}

func (_c *MockWeddingInfoRepo_GetWeddingInfo_Call) Run(run func(_a0 context.Context)) *MockWeddingInfoRepo_GetWeddingInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_GetWeddingInfo_Call) Return(_a0 entities.WeddingInfo, _a1 error) *MockWeddingInfoRepo_GetWeddingInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeddingInfoRepo_GetWeddingInfo_Call) RunAndReturn(run func(context.Context) (entities.WeddingInfo, error)) *MockWeddingInfoRepo_GetWeddingInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetWeddingLocation provides a mock function with given fields: _a0
func (_m *MockWeddingInfoRepo) GetWeddingLocation(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWeddingLocation")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeddingInfoRepo_GetWeddingLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeddingLocation'
type MockWeddingInfoRepo_GetWeddingLocation_Call struct {
	*mock.Call
}

// GetWeddingLocation is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockWeddingInfoRepo_Expecter) GetWeddingLocation(_a0 interface{}) *MockWeddingInfoRepo_GetWeddingLocation_Call {
	return &MockWeddingInfoRepo_GetWeddingLocation_Call{Call: _e.mock.On("GetWeddingLocation", _a0)}
}

func (_c *MockWeddingInfoRepo_GetWeddingLocation_Call) Run(run func(_a0 context.Context)) *MockWeddingInfoRepo_GetWeddingLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_GetWeddingLocation_Call) Return(_a0 string, _a1 error) *MockWeddingInfoRepo_GetWeddingLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeddingInfoRepo_GetWeddingLocation_Call) RunAndReturn(run func(context.Context) (string, error)) *MockWeddingInfoRepo_GetWeddingLocation_Call {
	_c.Call.Return(run)
	return _c
}

// RSVP provides a mock function with given fields: _a0, _a1
func (_m *MockWeddingInfoRepo) RSVP(_a0 context.Context, _a1 entities.Guest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RSVP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Guest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWeddingInfoRepo_RSVP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RSVP'
type MockWeddingInfoRepo_RSVP_Call struct {
	*mock.Call
}

// RSVP is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entities.Guest
func (_e *MockWeddingInfoRepo_Expecter) RSVP(_a0 interface{}, _a1 interface{}) *MockWeddingInfoRepo_RSVP_Call {
	return &MockWeddingInfoRepo_RSVP_Call{Call: _e.mock.On("RSVP", _a0, _a1)}
}

func (_c *MockWeddingInfoRepo_RSVP_Call) Run(run func(_a0 context.Context, _a1 entities.Guest)) *MockWeddingInfoRepo_RSVP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Guest))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_RSVP_Call) Return(_a0 error) *MockWeddingInfoRepo_RSVP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWeddingInfoRepo_RSVP_Call) RunAndReturn(run func(context.Context, entities.Guest) error) *MockWeddingInfoRepo_RSVP_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeddingInfoRepo creates a new instance of MockWeddingInfoRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeddingInfoRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeddingInfoRepo {
	mock := &MockWeddingInfoRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
