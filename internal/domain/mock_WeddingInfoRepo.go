// Code generated by mockery v2.42.1. DO NOT EDIT.

package domain

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockWeddingInfoRepo is an autogenerated mock type for the WeddingInfoRepo type
type MockWeddingInfoRepo struct {
	mock.Mock
}

type MockWeddingInfoRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeddingInfoRepo) EXPECT() *MockWeddingInfoRepo_Expecter {
	return &MockWeddingInfoRepo_Expecter{mock: &_m.Mock}
}

// GetWeddingDate provides a mock function with given fields: _a0
func (_m *MockWeddingInfoRepo) GetWeddingDate(_a0 context.Context) (time.Time, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWeddingDate")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Time, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeddingInfoRepo_GetWeddingDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeddingDate'
type MockWeddingInfoRepo_GetWeddingDate_Call struct {
	*mock.Call
}

// GetWeddingDate is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockWeddingInfoRepo_Expecter) GetWeddingDate(_a0 interface{}) *MockWeddingInfoRepo_GetWeddingDate_Call {
	return &MockWeddingInfoRepo_GetWeddingDate_Call{Call: _e.mock.On("GetWeddingDate", _a0)}
}

func (_c *MockWeddingInfoRepo_GetWeddingDate_Call) Run(run func(_a0 context.Context)) *MockWeddingInfoRepo_GetWeddingDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWeddingInfoRepo_GetWeddingDate_Call) Return(_a0 time.Time, _a1 error) *MockWeddingInfoRepo_GetWeddingDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeddingInfoRepo_GetWeddingDate_Call) RunAndReturn(run func(context.Context) (time.Time, error)) *MockWeddingInfoRepo_GetWeddingDate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeddingInfoRepo creates a new instance of MockWeddingInfoRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeddingInfoRepo(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockWeddingInfoRepo {
	mock := &MockWeddingInfoRepo{}
	mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
